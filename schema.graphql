type Space @entity {
  "The tokenId on the Motif Contract"
  id: ID!

  "The transaction hash the space was created at"
  transactionHash: String!

  "The current owner of the Space"
  owner: User!

  "The creator of the Space"
  creator: User!

  "The previous owner of the Motif Space's SpaceExchange"
  prevOwner: User!

  "The approved user of the Space"
  approved: User

  "The sha256 hash of the space's content"
  contentHash: Bytes!

  "The sha256 hash of the space's metadata"
  metadataHash: Bytes!

  "The uri of the content"
  contentURI: String!

  "The uri of the metadata"
  metadataURI: String! 

  "Pin code of space"
  pin: String!

  "The lands of space"
  lands: [BigInt!]

  "The bid share for the current owner of the Space"
  ownerBidShare: BigInt!

  "The bid share for the creator of the Space"
  creatorBidShare: BigInt!

  "The bid share for the previous owner of the Space's spaceExchange"
  prevOwnerBidShare: BigInt!

  "The timestamp of the block the Space was minted in"
  createdAtTimestamp: BigInt!

  "The number of the block the Space was minted in"
  createdAtBlockNumber: BigInt!

  "The timestamp of the block the Space was burned in"
  burnedAtTimeStamp: BigInt

  "The number of the block the Space was burned in"
  burnedAtBlockNumber: BigInt

  "The current Ask of the Space"
  currentAsk: Ask @derivedFrom(field: "space")

  "The current Bids on the Space"
  currentBids: [Bid!] @derivedFrom(field: "space")

  "The InactiveAsks of the Space"
  inactiveAsks: [InactiveAsk!] @derivedFrom(field: "space")

  "The InactiveBids of the Space"
  inactiveBids: [InactiveBid!] @derivedFrom(field: "space")

  "The transfers of the Space"
  transfers: [Transfer!] @derivedFrom(field: "space")

  "The ReserveLists of the Space"
  reserveListing: [ReserveListing!] @derivedFrom(field: "space")
}

type User @entity {
  "Ethereum Address"
  id: ID!

  "Users that have been granted `ApprovalForAll` Space of the User's Collection"
  authorizedUsers: [User!]

  "The Space the User owns"
  collection: [Space!]! @derivedFrom(field: "owner")

  "The Space the User created"
  creations: [Space!]! @derivedFrom(field: "creator")

  "The active Bids made by the User"
  currentBids: [Bid!] @derivedFrom(field: "bidder")
}

type Land @entity {
  "Ethereum Address"
  id: ID!

  "The originating token contract for this land"
  tokenContract: String!

  "The token ID for this land"
  tokenId: BigInt!
}


type Ask @entity {
  "<tokenId>-<ownerAddress>"
  id: ID!

  "The Space associated with the Ask"
  space: Space!

  "Transaction hash the ask was created at"
  transactionHash: String!

  "The Currency of the Ask"
  currency: Currency!

  "The amount of Currency of the Ask"
  amount: BigInt!

  "The owner of the Ask"
  owner: User!

  "The timestamp of the block the Ask was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Ask created in"
  createdAtBlockNumber: BigInt!
}

type Bid @entity {
  "<token-id>-<bidderAddress>"
  id: ID!

  "Transaction hash the bid was created at"
  transactionHash: String!

  "The Space associated with the Bid"
  space: Space!

  "The Currency of the Bid"
  currency: Currency!

  "The amount of Currency of the Bid"
  amount: BigInt!

  "The sellOnShare of the Bid"
  sellOnShare: BigInt!

  "The bidder of the Bid"
  bidder: User!

  "The recipient of Space if the Bid is accepted"
  recipient: User!

  "The timestamp of the block the Bid was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Bid was created in"
  createdAtBlockNumber: BigInt!
}

"The Types for SpaceExchangeEvents (Asks, Bids)"
enum SpaceExchangeEventType {
  Finalized
  Removed
}

type InactiveBid @entity {
  "<tokenId>-<transactionHash>-<logIndex>"
  id: ID!

  "Transaction hash the bid was created at"
  transactionHash: String!

  "The Space associated with the InactiveBid"
  space: Space!

  "The reason why this Bid is Inactive"
  type: SpaceExchangeEventType!

  "The Currency of the InactiveBid"
  currency: Currency!

  "The amount of Currency of the InactiveBid"
  amount: BigInt!

  "The sellOnShare of the InactiveBid"
  sellOnShare: BigInt!

  "The bidder of the InactiveBid"
  bidder: User!

  "The recipient of the InactiveBid"
  recipient: User!

  "The timestamp of the block the original Bid was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the original Bid was created in"
  createdAtBlockNumber: BigInt!

 "The timestamp of the block the original Bid was inactivated in"
  inactivatedAtTimestamp: BigInt!

  "The number of the block the original Bid was inactivated in"
  inactivatedAtBlockNumber: BigInt!
}

type InactiveAsk @entity {
  "<tokenId>-<transactionHash>-<logIndex>"
  id: ID!

  "Transaction hash the ask was created at"
  transactionHash: String!

  "The Space associated with the InactiveAsk"
  space: Space!

  "The why this Ask is Inactive"
  type: SpaceExchangeEventType!

  "The Currency of the InactiveAsk"
  currency: Currency!

  "The amount of Currency of the InactiveAsk"
  amount: BigInt!

  "The owner of the InactiveAsk"
  owner: User!

  "The timestamp of the block the original Ask was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the original Ask was created in"
  createdAtBlockNumber: BigInt!

  "The timestamp of the block the original Ask was inactivated in"
  inactivatedAtTimestamp: BigInt!

  "The number of the block the original Ask was inactivated in"
  inactivatedAtBlockNumber: BigInt!
}

type Currency @entity {
  "The address of the Currency"
  id: ID!

  "The name of the Currency"
  name: String!

  "The symbol of the Currency"
  symbol: String!

  "The decimals of the Currency"
  decimals: Int

  "Total Bid Liquidity of the Currency on all Motif Space"
  liquidity: BigInt!

  "The active Bids denominated in the Currency"
  activeBids: [Bid!] @derivedFrom(field: "currency")

  "The active Asks denominated in the Currency"
  activeAsks: [Ask!] @derivedFrom(field: "currency")

  "The InactiveBids denominated in the Currency"
  inactiveBids: [InactiveBid!] @derivedFrom(field: "currency")

  "The InactiveAsks denominated in the Currency"
  inactiveAsks: [InactiveAsk!] @derivedFrom(field: "currency")
}

type Transfer @entity {
  "<tokenId>-<transactionHash>-<logIndex>"
  id: ID!

  "Transaction hash for the transfer"
  transactionHash: String!

  "The Space associated with the Transfer"
  space: Space!

  "The User transferring the Space"
  from: User!

  "The User receiving the Space"
  to: User!

  "The timestamp of the block the Transfer was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Transfer was created in"
  createdAtBlockNumber: BigInt!
}

"The Types of URI Updates"
enum URIUpdateType {
  Content
  Metadata
}

type URIUpdate @entity {
  "<tokenId>-<transactionHash>-<logIndex>"
  id: ID!

  "The transaction has the uri update happened at"
  transactionHash: String!

  "The Type of URIUpdate"
  type: URIUpdateType!

  "The previous uri"
  from: String!

  "The new uri"
  to: String!

  "The Space associated with the URIUpdate"
  space: Space!

  "The owner of the Space"
  owner: User!

  "The updater of the Space's URI"
  updater: User!

  "The timestamp of the block the URIUpdate was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the URIUpdate was created in"
  createdAtBlockNumber: BigInt!
}

enum ReserveListingBidType {
  Active
  Refunded
  Final
}

type ReserveListingBid @entity {
  "<listId>-<txHash>-<logIndex>"
  id: ID!

  "The transaction hash the reserve list big was created at"
  transactionHash: String!

  "The Reserve list associated with the Bid"
  reserveListing: ReserveListing!

  "The amount of the Bid"
  amount: BigInt!

  "The bidder of the Bid"
  bidder: User!

  "The type of bid (active, refunded, final)"
  bidType: ReserveListingBidType!

  "The timestamp of the block the Bid was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Bid was created in"
  createdAtBlockNumber: BigInt!
}

type InactiveReserveListingBid @entity {
  "<listId>-<txHash>-<logIndex>"
  id: ID!

  "The transaction hash the reserve list big was created at"
  transactionHash: String!

  "The Reserve list associated with the Bid"
  reserveListing: ReserveListing!

  "The amount of the Bid"
  amount: BigInt!

  "The bidder of the Bid"
  bidder: User!

  "The type of bid (active, refunded, final)"
  bidType: ReserveListingBidType!

  "The timestamp of the block the bid was inactivated at (via outbid, cancellation, winning bid)"
  bidInactivatedAtTimestamp: BigInt!

  "The number of the block the bid was inactivated at (via outbid, cancellation, winning bid)"
  bidInactivatedAtBlockNumber: BigInt!

  "The timestamp of the block the Bid was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Bid was created in"
  createdAtBlockNumber: BigInt!
}
enum ReserveListingStatus {
  Pending
  Active
  Canceled
  Finished
}

type ReserveListing @entity {
  "ID of the list from contract, autoincrementing int"
  id: ID!

  "Transaction hash where the reserve list was created"
  transactionHash: String!

  "The originating token contract for this list"
  tokenContract: String!

 

  "The token ID for this list"
  tokenId: BigInt!

  "<tokenContract>-<tokenId>"
  token: String!

  "The space for the list, if it is a motif NFT"
  space: Space

  "Whether or not the list has been approved by the intermediary"
  approved: Boolean!

  "SpaceListing start timestamp"
  startsAt: BigInt

  "The length of time the list is intended to run for, after the first bid is made"
  duration: BigInt!

  "The expected end of list timestamp, which can change if bids were placed within the last 15 minutes, and is not set until the first bid is placed"
  expectedEndTimestamp: BigInt

  "The time the first bid was placed"
  firstBidTime: BigInt

  "The minimum price of the first bid"
  listPrice: BigInt!

  "Type of list. 1 for bidding, 2 for drop list, 3 for fixed price."
  listType: Int!

  "The sale percentage to send to the intermediary"
  intermediaryFeePercentage: Int!

  "The address that should receive the funds once the NFT is sold"
  tokenOwner: User!

  "The address of the list's intermediary"
  intermediary: User!

  "The address of the ERC-20 currency to run the list with, or 0x0 for ETH"
  listCurrency: Currency!

  status: ReserveListingStatus!

  "The current bid on this list"
  currentBid: ReserveListingBid

  "The previous bids on this list"
  previousBids: [InactiveReserveListingBid!]  @derivedFrom(field: "reserveListing")

  "The time the list was approved"
  approvedTimestamp: BigInt

  "The number of the block the list was Approved"
  approvedBlockNumber: BigInt

  "The timestamp of the block the Transfer was created in"
  createdAtTimestamp: BigInt!

  "The number of the block the Transfer was created in"
  createdAtBlockNumber: BigInt!

  "The timestamp at which the list end function was called"
  finalizedAtTimestamp: BigInt

  "The block number at which the list end function was called"
  finalizedAtBlockNumber: BigInt
}